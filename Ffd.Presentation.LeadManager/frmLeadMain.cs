using Chilkat;
using Ffd.App.Core;
using Ffd.Common;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Windows.Forms;
using Ffd.Data;
using System.IO;
using System.Text.RegularExpressions;
using System.Threading;

namespace Ffd.Presentation.LeadManager
{
    public partial class frmLeadMain : Form
    {
        /// <summary>
        /// Settings for the application.
        /// </summary>
        /// <remarks>
        /// This class is autogenerated by Visual Studio.  You can add a settings file to a project by right-clicking the project, 
        /// "Add new item", type "Settings File".  It inserts a couple of files, and I think it uses the last name in 
        /// the namespace as the classname by default.  
        /// 
        /// Then you can add settings by double clicking the [classname].settings file.  Visual Studio generates a .cs
        /// file from the settings file, so you can access the settings with Intellisense.  It's pretty cool.
        /// 
        /// You just have to add a member variable in your class like so.  I think it has to be private, I'm not sure.
        /// Declaring as public causes "This thing is less accessible than that thing" type compilation error.
        /// </remarks>


        private Leadmanager _settings = new Leadmanager();
        private bool _doingProcessing = false;
        private int _secsTillStart;
        private string _origProgramTitle;

        // private const int _intervalBetweenChecksSecs = 15;

        public frmLeadMain()
        {
            InitializeComponent();
            _origProgramTitle = this.Text;
            _secsTillStart = _settings.CheckEmailIntervalSecs;

            RefreshUI();
        }

        private void btnClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void RefreshUI()
        {
            this.Text = string.Format("{0} - Debug mode: {1}", _origProgramTitle, _settings.DebuggingMode);

            if (timerMain.Enabled)
            {
                this.Text = string.Format("{0} - Secs till start: {1}", this.Text, _secsTillStart);
            }

            if (_doingProcessing)
            {
                this.Text = string.Format("{0} - Processing!", this.Text);
            }
        }

        private void Log(string msg, params object[] additionalParams)
        {
            //
            // Not sure if manually trimming the length is really necessary or not
            //
            int maxDisplayLogLength = txtLog.MaxLength;

            string currentLog = txtLog.Text;

            if (additionalParams != null)
            {
                msg = string.Format(msg, additionalParams);
            }

            msg = LogFile.FormatMsgWithTime(msg);

            currentLog += msg;

            int length = currentLog.Length;

            if (length > maxDisplayLogLength)
            {
                currentLog = currentLog.Substring(length - maxDisplayLogLength);
            }

            txtLog.Text = currentLog;
            txtLog.SelectionStart = currentLog.Length;
            txtLog.ScrollToCaret();

            LogFile logFile = new LogFile();
            logFile.FormatWithTime = false;
            logFile.Log(msg);

            this.Refresh();
            Application.DoEvents();
        }

        private bool ProcessImportedLeads(Stream fileStream)
        {
            Log("Opening file...");

            int duplicateLeads = 0;
            int successfulWrites = 0;
            int failedWrites = 0;

            StreamReader reader = new StreamReader(fileStream);

            DataTable table = CSVReader.Parse(reader.ReadToEnd(), true);

            Log("Found {0} leads in data file.", table.Rows.Count);

            foreach (DataRow row in table.Rows)
            {
                Lead lead = DataManager.GetLeadFromFundraisingIdeasCSVDataRow(row);
                ApplicationManager.SetFundraisingIdeasProperties(lead);

                Log("Found lead: {0}", lead);

                Lead existingLead = DataManager.GetLead(lead.EmailAddress);

                if (existingLead == null)
                {
                    Log("Is new lead");

                    // bool res = DataManager.WriteLead(lead, DataManager.ObjectWriteMode.Insert);
                    bool res = DataManager.WriteCustomer(lead, DataManager.ObjectWriteMode.Insert);

                    Log("Write lead to db: {0}", res.ToString());

                    if (res)
                    {
                        Log("Wrote OK to DB");
                        successfulWrites++;
                    }
                    else
                    {
                        Log("Failed to write to DB!");
                        failedWrites++;
                    }

                }
                else
                {
                    Log("Is duplicate lead");
                    duplicateLeads++;
                }
            }

            Log("Summary - total leads found: {0}, failed: {1}, duplicate: {2}, newly inserted: {3}",
                table.Rows.Count,
                failedWrites,
                duplicateLeads,
                successfulWrites);

            return true;
        }

        /// <summary>
        /// Process the new lead emails.
        /// </summary>
        /// <returns>True if it worked.</returns>
        private bool ProcessIncomingLeadEmails()
        {
            Log("Gettting email leads...");

            string msg = string.Empty;
            MailMan mailman = ApplicationManager.GetLeadMailman();
            bool result = false;

            int nonLeadEmails = 0;
            int duplicateEmails = 0;
            int successfulWrites = 0;
            int failedWrites = 0;
            int bouncedEmails = 0;

            if (mailman != null)
            {
                Log("Getting all emails...");
                EmailBundle leadEmails = ApplicationManager.GetLeadEmails(mailman, out msg);

                if (leadEmails != null)
                {
                    Log("Found {0} emails.", leadEmails.MessageCount);

                    int i;
                    Email email = null;
                    for (i = 0; i <= leadEmails.MessageCount - 1; i++)
                    {
                        email = leadEmails.GetEmail(i);

                        Lead lead = ApplicationManager.GetLeadFromFundraisingIdeasEmail(email);

                        bool deleteThisEmail = false;

                        if (lead != null)
                        {
                            Log("Retrieved lead: {0}", lead.ToString());

                            Lead existingLead = DataManager.GetLead(lead.EmailAddress);
                            bool res = false;

                            if (existingLead == null)
                            {
                                // res = DataManager.WriteLead(lead, DataManager.ObjectWriteMode.Insert);
                                res = DataManager.WriteCustomer(lead, DataManager.ObjectWriteMode.Insert);

                                Log("Write lead to db: {0}", res.ToString());

                                if (res)
                                {
                                    successfulWrites++;
                                }
                                else
                                {
                                    failedWrites++;
                                    throw new ApplicationException("Cannot write lead to db - cannot continue");
                                }

                            }
                            else
                            {
                                Log("Lead exists in db, skipping...");
                                duplicateEmails++;
                            }

                            if (existingLead != null || res)
                            {
                                // Its either a duplicate, or it was inserted ok, either way let's delete it.
                                deleteThisEmail = true;
                            }
                        }
                        else if (email.From.Contains("Mail Delivery Subsystem"))
                        {
                            //
                            // We have a bounced email
                            //
                            string bounceEmail = Functions.GetValueFromText(email.Body, "<(.*@.*)>");

                            string bounceReason = Functions.GetValueFromText(email.Body, "<.*@.*>...(.*)");

                            if (bounceReason == string.Empty)
                            {
                                bounceReason = Functions.GetValueFromText(email.Body, "\\((reason.*55.*)\\)");
                            }

                            if (bounceEmail != string.Empty)
                            {
                                Lead existingLead = DataManager.GetLead(bounceEmail);
                                // email.GetAttachedMessage(0).GetToName(0)

                                if (existingLead == null)
                                {
                                    // 
                                    // No email address, let's try by name and status
                                    //
                                    if (email.NumAttachedMessages > 0 && email.GetAttachedMessage(0).NumTo > 0)
                                    {
                                        PersonName name = new PersonName();
                                        if (name.ParseFullName(email.GetAttachedMessage(0).GetToName(0)))
                                        {
                                            existingLead = DataManager.GetLeadByNameAndStatus(name.FirstName, name.LastName, Lead.LeadStatusCode.lscEmailSent);
                                        }
                                    }
                                }

                                if (existingLead != null)
                                {
                                    bool res = DataManager.WriteLeadStatusLog(existingLead, Lead.LeadStatusCode.lscEmailBounced1, bounceReason.Substring(0, Math.Min(150, bounceReason.Length)));
                                    Log("Bounced email from {0} for reason \"{1}\", update status log = {2}", bounceEmail, bounceReason, res);

                                    if (res)
                                    {
                                        deleteThisEmail = true;
                                    }
                                }
                                else
                                {
                                    Log("Bounced email from {0}, but can't find email addr in db.", bounceEmail);
                                }
                            }
                            else
                            {
                                Log("We have a bounced email, but can't get the email address from the body.");
                            }
                            bouncedEmails++;
                        }
                        else if (email.Subject.Contains("Out of Office") || email.Subject.Contains("AutoReply"))
                        {
                            Log("Found autoreply from: {0}, deleting", email.From);
                            deleteThisEmail = true;
                        }
                        else if (email.Subject == "echo")
                        {
                            Log("Found echo request from: {0}", email.FromAddress);

                            Lead testLead = new Lead();

                            testLead.ParseFullName(email.FromName);
                            testLead.LeadInfoText = email.GetPlainTextBody();
                            testLead.EmailAddress = email.FromAddress;
                            ApplicationManager.SetFundraisingIdeasProperties(testLead);

                            if (testLead.TemplateCurrent == null)
                            {
                                testLead.TemplateCurrent = DataManager.GetTemplate("Hockey");   // Hockey template
                            }

                            ProcessNewDatabaseLeads(testLead);

                            deleteThisEmail = true;
                        }
                        else if (email.Subject == "unsubscribe")
                        {
                            Log("Found unsubscribe request from: {0}", email.FromAddress);

                            Lead existingLead = DataManager.GetLead(email.FromAddress);

                            if (existingLead != null)
                            {
                                bool res = DataManager.WriteLeadStatusLog(existingLead, Lead.LeadStatusCode.lscUnsubscribeRequestReceived);
                                Log("Bye bye {0}; update status log = {1}", existingLead.FirstName, res);

                                if (res)
                                {
                                    deleteThisEmail = true;
                                }
                            }
                            else
                            {
                                Log("Odd, can't find email address in db.  Doing nothing.");
                            }
                        }
                        else
                        {
                            Log("Skipping non-lead email from: {0}", email.FromAddress);
                            nonLeadEmails++;
                        }

                        if (deleteThisEmail)
                        {
                            //  Delete this email.
                            bool success = mailman.DeleteEmail(email);
                            if (success != true)
                            {
                                Log("Strangeness, can't delete POP3 email: {0}", mailman.LastErrorText);
                            }
                        }
                    }
                    Log("Ending email session...");
                    mailman.Pop3EndSession();

                    Log("Summary - total emails found: {0}, non-lead: {1}, duplicate: {2}, newly inserted: {3}",
                        leadEmails.MessageCount,
                        nonLeadEmails,
                        duplicateEmails,
                        successfulWrites);

                    result = true;
                }
                else
                {
                    //
                    // Happens if tcp/ip issue.  Thanks Time Warner!
                    //
                    Log("Can't get POP3 emails.  Msg was: {0}", msg);
                }
            }
            else
            {
                Log("Can't get mailman component - is it registered and licensed?");
            }

            return result;
        }

        /// <summary>
        /// Get all the leads from the database and do stuff with them.  That doesn't sound very good does it.
        /// </summary>
        /// <remarks>
        /// This should probably go in ApplicationManager with callbacks and stuff for logging.  Todo.
        /// </remarks>
        private void ProcessNewDatabaseLeads()
        {
            ProcessNewDatabaseLeads(null);
        }

        /// <summary>
        /// Get all the leads from the database and do stuff with them.  That doesn't sound very good does it.
        /// </summary>
        /// <param name="testLead">(Optional) A test lead to send to rather than DB leads.</param>
        /// <remarks>
        /// This should probably go in ApplicationManager with callbacks and stuff for logging.  Todo.
        /// </remarks>
        private void ProcessNewDatabaseLeads(Lead testLead)
        {
            const string genericTeamName = "WARRIORS";
            const string defaultTemplateDesc1 = "Football";
            const string defaultTemplateDesc2 = "Baseball";
            const int customJersyImageWidth = 150;
            const string imagesSubdir = "images";
            const string commonSubdir = "common";
            const string tempSubdir = "temp";
            const int maxNumLeadsCommonSense = 5;
            int sendRetries = 0;

            //
            // Debugging mode doesn't send emails to leads, but it sends them to a test account.
            //
            bool debugging = _settings.DebuggingMode;

            Log("Processing new leads in db, debugging mode: {0}...", debugging);

            string errMsg = string.Empty;
            string outputEmailFile = Functions.BuildFilenameFromElements(_settings.EmailSrcDir, "output-temp.htm");
            //
            // Read header row, then read the row we want.
            //
            StreamReader reader = File.OpenText(Functions.BuildFilenameFromElements(_settings.EmailSrcDir, string.Format("lead-email-{0}.htm", _settings.EmailTemplateNo)));
            string emailTemplateOrig = reader.ReadToEnd();
            reader.Close();


            //  The mailman object is used for sending and receiving email.
            Chilkat.MailMan mailman = new Chilkat.MailMan();

            // The MHT component can be used to convert an HTML page
            // from a URL, file, or in-memory HTML into an email
            // with embedded images and style sheets.
            Chilkat.Mht mht = new Chilkat.Mht();


            //  Any string argument automatically begins the 30-day trial.
            bool success;
            // success = mailman.UnlockComponent(Config.ChilkatUnlockCodeEmail);
            success = mailman.UnlockComponent(ChilkatRegCodes.ChilkatEmail);
            if (success != true)
            {
                Log("Component unlock failed");
                return;
            }

            // success = mht.UnlockComponent(Config.ChilkatUnlockCodeEmail);
            success = mht.UnlockComponent(ChilkatRegCodes.ChilkatMHT);
            if (success != true)
            {
                Log("Mht component unlock failed");
                return;
            }

            //  Set the SMTP server.
            mailman.SmtpHost = Config.LeadMailboxServer;

            //  Set the SMTP login/password (if required)
            mailman.SmtpUsername = Config.LeadMailboxLoginUID;
            mailman.SmtpPassword = Config.LeadMailboxLoginPW;

            //
            // Set up parameters to append to all the email links so Google Analytics can track the clicks for us.
            //
            Campaign campaign = new Campaign();

            // Todo: grab this from the db & config file
            campaign.Source = "fundraisingweb";
            campaign.Medium = (debugging || testLead != null) ? "testing" : "email";
            campaign.Content = _settings.EmailTemplateNo;


            List<Lead> leads;

            if (testLead == null)
            {
                Log("Getting leads from db...");
                leads = DataManager.GetNewFundraisingLeads();
            }
            else
            {
                leads = new List<Lead>();
                leads.Add(testLead);
            }

            if (leads.Count > maxNumLeadsCommonSense)
            {
                string msg = string.Format("An unusually high amount of leads were returned from the db ({0}), do you wish to send emails anyway?", leads.Count);
                if (MessageBox.Show(msg, "Sanity Check", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.No)
                {
                    // Close the program
                    btnClose_Click(null, null);
                }
            }

            foreach (Lead lead in leads)
            {
                Log("Processing lead: {0}", lead);

                if (!_doingProcessing && testLead == null)
                {
                    //
                    // We were signalled to stop processing
                    //
                    Log("User signalled to quit, exiting...");
                    return;
                }

                string emailTemplate = emailTemplateOrig;

                //Lead lead = leads[0];
                // ApplicationManager.SetFundraisingIdeasProperties(lead);

                // const int totalNumberOfTemplates = 5;

                // string templateDescShort = Functions.FirstNonemptyString(lead.TemplateDescShort, "Football");

                //
                // Otherwise, make it 1 so that we put in two different template graphics.
                //
                // int altTemplate = lead.TemplateDescShort == string.Empty ? 1 : 0;
                string customName;

                if (!Functions.IsEmptyString(lead.LastName) && lead.LastName.Length <= 13)
                {
                    customName = lead.LastName;
                }
                else if (!Functions.IsEmptyString(lead.FirstName) && lead.LastName.Length <= 13)
                {
                    customName = lead.FirstName;
                }
                else
                {
                    customName = "anyname";
                }

                customName = customName.ToUpper();

                string customNumber = string.Format("{0:yy}", DateTime.Now);

                Template template1 = lead.TemplateCurrent;
                Template template2 = lead.TemplateCurrent;

                // If we have a specific template specified, use them both.  Otherwise, use the default and another one.
                if (template1 == null)
                {
                    template1 = DataManager.GetTemplate(defaultTemplateDesc1);
                    // template2 = DataManager.GetTemplate(((template1.TemplateId + 1) % totalNumberOfTemplates + 1) + 1);
                    template2 = DataManager.GetTemplate(defaultTemplateDesc2);
                }

                //Template template1 = DataManager.GetTemplate(templateDescShort);
                //Template template2 = DataManager.GetTemplate((template1.TemplateId + altTemplate) % totalNumberOfTemplates);

                PlayerSeason example1 = new PlayerSeason(customName, customNumber);
                PlayerSeason example2 = new PlayerSeason(genericTeamName, customNumber);

                example1.TemplateCurrent = template1;
                example2.TemplateCurrent = template2;

                string example1File = string.Format("{0}_{1:000}_{2}_{3}.jpg", template1.TemplateDescShort, template1.TemplateId, customName, customNumber);
                string example1FPath = Functions.BuildFilenameFromElements(
                    _settings.EmailSrcDir,
                    imagesSubdir,
                    tempSubdir,
                    example1File);

                string example2File = string.Format("{0}_{1:000}_{2}_{3}.jpg", template2.TemplateDescShort, template2.TemplateId, genericTeamName, customNumber);
                string example2FPath = Functions.BuildFilenameFromElements(
                    _settings.EmailSrcDir,
                    imagesSubdir,
                    commonSubdir,
                    example2File);

                Log("Creating image: {0}", example1File);
                ApplicationManager.WritePlayerMarketingGIFFile(example1, customJersyImageWidth, example1FPath, debugging);

                Log("Creating image: {0}", example2File);
                ApplicationManager.WritePlayerMarketingGIFFile(example2, customJersyImageWidth, example2FPath, debugging);

                //
                // Personalize the email.
                //
                Dictionary<string, string> replacements = new Dictionary<string, string>();

                replacements.Add("[cust_fname]", Functions.TitleCase(Functions.FirstNonemptyString(lead.FirstName.ToLower(), lead.LastName.ToLower(), "Hi future fundraiser")));
                replacements.Add("[current_year_2digit]", customNumber);
                replacements.Add("[homepage_href]", ApplicationManager.BuildWebsiteLink(null, campaign));

                string addtlLi = string.Empty;
                if (lead.IsAthletics)
                {
                    addtlLi = string.Format("<li>Your {0} team!</li>", lead.TemplateCurrent.TemplateDescShort);
                }
                replacements.Add("[perfect_for_addtl_li]", addtlLi);

                replacements.Add("[specific_jersey_href]", ApplicationManager.BuildWebsiteLink(example1, campaign));
                replacements.Add("[alternate_jersey_href]", ApplicationManager.BuildWebsiteLink(example2, campaign));

                replacements.Add("[specific_jersey_image]", Functions.BuildUrlFromElements(imagesSubdir, tempSubdir, example1File));
                replacements.Add("[alternate_jersey_image]", Functions.BuildUrlFromElements(imagesSubdir, commonSubdir, example2File));

                replacements.Add("[homepage_href_fundraisingpage]", ApplicationManager.BuildWebsiteLink(null, campaign, Config.WebsiteFundraisingPage));
                replacements.Add("[unsubscribe_url]", string.Format("mailto:{0}?subject=unsubscribe&body=Your%20stickers%20are%20great%20but%20please%20unsubscribe%20me.", Config.LeadMailboxLoginUID));

                replacements.Add("[how_user_entered_info]", "to the \"Fundraising Ideas\" website");

                //
                // Validate the row, all these fields must be there or we're wasting our time.
                // 
                foreach (KeyValuePair<string, string> replacement in replacements)
                {
                    if (!emailTemplate.Contains(replacement.Key))
                    {
                        errMsg = string.Format("Cannot find required value in output file: \"{0}\"", replacement.Key);
                        throw new ApplicationException(errMsg);

                        //
                        // Do something with the error here.
                        //
                    }
                    else
                    {
                        emailTemplate = emailTemplate.Replace(replacement.Key, replacement.Value);
                    }
                }

                MatchCollection leftovers1 = Regex.Matches(emailTemplate, "(\\[.*\\])");

                if (leftovers1.Count > 0)
                {
                    string msg = "You need to implement the following tokens:\r\n\r\n";

                    foreach (Match token in leftovers1)
                    {
                        msg = Functions.BuildStringFromElementsWithDelimiter(msg, token.Groups[0].ToString(), "\r\n");
                    }

                    MessageBox.Show(msg, "Fix These", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                    return;
                }

                string emailSubject = Functions.GetValueFromText(emailTemplate, "<title>(.*)</title>");


                Functions.WriteStringAsFile(emailTemplate, outputEmailFile);

                Log("Done creating email, now gonna email it.");

                //  Create a new email object
                Chilkat.Email email = new Chilkat.Email();

                // Embed the images in the email - Outlook friendly.
                mht.UseCids = true;

                // Create an email from an HTML file.
                email = mht.GetEmail(outputEmailFile);
                if (email == null)
                {
                    MessageBox.Show(mht.LastErrorText);
                    return;
                }

                email.Subject = emailSubject;
                // email.Body = "This is a test";
                email.From = string.Format("Fan Favorite Designs <{0}>", Config.LeadMailboxLoginUID);
                email.ReplyTo = Config.LeadMailboxLoginUID;

                if (debugging)
                {
                    email.AddTo("Lead Monitor", "leads@fanfavoritedesigns.com");
                }
                else
                {
                    email.AddTo(lead.BuildFullName(), lead.EmailAddress);
                    // email.AddBcc("Lead Monitor", "leads@fanfavoritedesigns.com");
                }

                Chilkat.HtmlToText h2t = new Chilkat.HtmlToText();
                // success = h2t.UnlockComponent(Config.ChilkatUnlockCodeEmail);
                success = h2t.UnlockComponent(ChilkatRegCodes.ChilkatHTMLtoXML);
                if (success != true)
                {
                    MessageBox.Show(h2t.LastErrorText);
                    return;
                }

                //  Get the email's HTML body.
                string html;
                html = email.GetHtmlBody();

                //  Convert it to plain text:
                string plainText;
                plainText = h2t.ToText(html);

                // Add a few things so the email makes sense.
                plainText = string.Format("This email was meant to be viewed in HTML mode.  You can visit \r\nour website here to get a better look at our product.\r\n\r\n    {0}\r\n{1}", ApplicationManager.BuildWebsiteLink(null, campaign), plainText);

                //  Add a plain-text alternative to the email:
                email.AddPlainTextAlternativeBody(plainText);

                //  Call SendEmail to connect to the SMTP server and send.
                //  The connection (i.e. session) to the SMTP server remains
                //  open so that subsequent SendEmail calls may use the
                //  same connection.
                Log("Sending SMTP mail...");
                success = mailman.SendEmail(email);
                if (success != true)
                {
                    sendRetries++;

                    if (sendRetries < 5)
                    {
                        Log("Can't send email, gonna hang out for a bit, and try again.");
                        Thread.Sleep(20000);
                    }
                    else
                    {
                        throw new ApplicationException("Cannot send email - cannot continue.");
                    }
                }
                else if (!debugging && testLead == null)
                {
                    //
                    // Update the DB indicating that we sent the email so we don't do it again.
                    //
                    bool res = DataManager.AddLeadStatusLog(lead, Lead.LeadStatusCode.lscEmailSent, string.Format("lead-email-{0}.htm", _settings.EmailTemplateNo));

                    if (res)
                    {
                        Log("Updated status log - all good.");
                    }
                    else
                    {
                        Log("Yikes, can't update status log that we emailed!  Bombing out.");
                        throw new ApplicationException("Cannot update status log - cannot continue.");
                    }
                    sendRetries = 0;
                }
                else
                {
                    Log("Email success; debug mode - not updating DB");
                    sendRetries = 0;
                }

                //  Some SMTP servers do not actually send the email until
                //  the connection is closed.  In these cases, it is necessary to
                //  call CloseSmtpConnection for the mail to be  sent.
                //  Most SMTP servers send the email immediately, and it is
                //  not required to close the connection.  We'll close it here
                //  for the example:
                success = mailman.CloseSmtpConnection();
                if (success != true)
                {
                    Log("Connection to SMTP server not closed cleanly.");
                    throw new ApplicationException("Cannot disconnect from SMTP server cleanly - cannot continue.");
                }
            }

            Log("Cleaning up temp files, if any.");
            string tempDirPath = Functions.BuildFilenameFromElements(
                _settings.EmailSrcDir,
                imagesSubdir,
                tempSubdir);

            string[] tempFiles = Directory.GetFiles(tempDirPath);
            foreach (string file in tempFiles)
            {
                File.Delete(file);
            }

            // todo: add icon to exe

            // todo: buy chilkat components

            Log("Processing of db leads completed");
        }


        private void btnStart_Click(object sender, EventArgs e)
        {
            if (timerMain.Enabled || _doingProcessing)
            {
                // We are turned on, we want to shut down

                //
                // Signal for any running processes to stop
                //
                _doingProcessing = false;
                timerMain.Enabled = false;
                btnStart.Text = "Start";
            }
            else
            {
                // We are off, we want to turn on
                _secsTillStart = 0;     // <-- start immediately.  delayed start: _settings.CheckEmailIntervalSecs;
                timerMain.Interval = 1000;
                timerMain.Enabled = true;

                btnStart.Text = "Stop";
            }

            RefreshUI();
        }

        private void btnProcessEmail_Click(object sender, EventArgs e)
        {
            ProcessIncomingLeadEmails();
        }

        private void btnSend_Click(object sender, EventArgs e)
        {
            _doingProcessing = true;
            RefreshUI();

            ProcessNewDatabaseLeads();

            _doingProcessing = false;
            RefreshUI();
        }

        private void frmLeadMain_Load(object sender, EventArgs e)
        {
            txtEmailAddr.Text = "";

            Log("\r\n********************\r\nProgram startup...\r\n********************");
        }

        private void btnImportLeads_Click(object sender, EventArgs e)
        {
            openFileDialog.Filter = "Fundraising Ideas (*.csv)|*.csv|All Files|*.*";
            openFileDialog.Title = "Select Lead File";
            openFileDialog.InitialDirectory = System.Windows.Forms.Application.StartupPath;

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                ProcessImportedLeads(openFileDialog.OpenFile());
            }
        }

        private void timerMain_Tick(object sender, EventArgs e)
        {
            if (_doingProcessing)
            {
                //
                // Timer shouldn't be on during processing, just in case turn it off
                //
                timerMain.Enabled = false;
                return;
            }

            _secsTillStart--;

            if (_secsTillStart <= 0)
            {
                //
                // Work our magic
                //
                timerMain.Enabled = false;
                _doingProcessing = true;
                RefreshUI();

                ProcessIncomingLeadEmails();
                ProcessNewDatabaseLeads();

                _secsTillStart = _settings.CheckEmailIntervalSecs;
                _doingProcessing = false;
                timerMain.Enabled = true;
            }

            RefreshUI();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Lead testLead = new Lead();

            testLead.FirstName = "Test";
            testLead.LastName = "Lead";
            testLead.TemplateCurrent = DataManager.GetTemplate("Hockey");   // Hockey template
            testLead.EmailAddress = txtEmailAddr.Text;

            ProcessNewDatabaseLeads(testLead);
        }
    }
}